@inject CardsState CardsState
@* @namespace codenames_solver.Classes *@
@implements IDisposable

<div class="code-card flex-column align-items-center" card-color="@cardColor" @onclick="ToggleColorSelector" >
    <div class="d-flex gap-2">
        <span>
            <input class="w-100" placeholder="Enter a word..." @oninput="UpdateCardTextOninput" value="@cardText" @onclick:stopPropagation="true" @onfocus="OnFocus" @onblur="OnBlur" />
        </span>

        <IsValidWordIcon CardIndex="@CardIndex"/>
    </div>

    @if (_isInputSelected)
    {
        <WordsDropdown CardIndex="@CardIndex"/>
    }

    <hr class="my-1"/>
    <div class="d-flex justify-content-between align-items-stretch w-100">
        <span>
            Test
        </span>
        <span>
            Test2
        </span>
    </div>
    @if(ShowColorSelector)
    {
        <ColorSelector CardIndex="@CardIndex"/>
    }
</div>


@code {
    [Parameter]
    public int CardIndex { get; set; }

    private bool _isInputSelected;
    private string cardText => CardsState.GetCardText(CardIndex);
    private CardColor cardColor => CardsState.GetCardColor(CardIndex);
    private bool ShowColorSelector { get; set; } = false;

    void OnFocus(FocusEventArgs e)
    {
        _isInputSelected = true;
    }

    void OnBlur(FocusEventArgs e)
    {
        _isInputSelected = false;
    }

    void ToggleColorSelector()
    {
        ShowColorSelector = !ShowColorSelector;
    }

    void UpdateCardTextOninput(ChangeEventArgs e)
    {
        string msg = e.Value.ToString();
        CardsState.UpdateCardText(this, msg, CardIndex);
    }

    protected override void OnInitialized()
    {
        CardsState.StateChanged += async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        CardsState.StateChanged -= async (Source, Property)
            => await InvokeAsync(StateHasChanged);
    }
}

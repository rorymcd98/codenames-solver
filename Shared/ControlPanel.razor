@inject SimilarityClient SimilarityClient
@inject CardsState CardsState
@inject ControlState ControlState
@inject DataState DataState

<div class="d-flex flex-column gap-2 align-items-center" style="color: rgba(255,255,255,0.7);">
    <div class="d-flex gap-2 align-items-center">
        <Button OnClick="@GetSimilarWords" Text="@findCodewordsButtonText" />
        <Button OnClick="@RandomiseBoard" Text="@randomiseBoardButtonText" />
        <div>
            Related words:
        </div>
        <select @onchange="UpdateNumberOfWords" value="@currentNumberOfWords">
            @foreach (var number in validNumbers)
            {
                <option value="@number">@number</option>
            }
        </select>
        <div>
            Current team:
        </div>
        <select @onchange="UpdateCurrentTeam" style="color: white; background-color: @currentTeam" value="@currentTeam">
            @foreach (var team in Enum.GetNames(typeof(Team)))
            {
                <option value="@team" style="background-color: @team ">@team</option>
            }
        </select>
    </div>
    @*<div>
    <input placeholder="(Optional) Test a Codeword..." @oninput="UpdateCurrentCodeWord" value="@localCodeWord" />
        <Button OnClick="GetWordAssessment" Text="Assess Codeword" />
    </div> *@
    @if (errorMessage != null && errorMessage.Length > 0)
    {
        <p style="color: red;">
            Error: @errorMessage
        </p>
    }

</div>

@code {
    string errorMessage = string.Empty;
    string findCodewordsButtonText = "Find Codewords";
    SimilarityGeneratorPostResponseDTO similarityResponse = new();
    int currentNumberOfWords => ControlState.CurrentNumberOfWords;
    List<int> validNumbers = Enumerable.Range(1, 6).ToList();
    Team currentTeam => ControlState.CurrentTeam;
    string localCodeWord = string.Empty;

    void UpdateCurrentCodeWord(ChangeEventArgs e)
    {
        string newCodeWord = e?.Value?.ToString() ?? string.Empty;
        ControlState.UpdateCodeWord(newCodeWord);
    }

    void UpdateNumberOfWords(ChangeEventArgs e)
    {
        if (e?.Value?.ToString() is string stringValue
           && int.TryParse(stringValue, out int newNumber))
        {
            ControlState.UpdateNumberOfWords(newNumber);
        }
        else
        {
            throw new ArgumentException($"Value must be an integer, but got: {e?.Value}");
        }
    }

    void UpdateCurrentTeam(ChangeEventArgs e)
    {
        if (e?.Value?.ToString() is string newTeamString)
        {
            Team newTeam;

            if (newTeamString == "Red")
            {
                newTeam = Team.Red;
            }
            else if (newTeamString == "Blue")
            {
                newTeam = Team.Blue;
            }
            else
            {
                var newError = $"Value must be 'Red' or 'Blue', but got: {newTeamString}";
                errorMessage = newError;
                throw new ArgumentException(newError);
            }

            ControlState.UpdateTeam(newTeam);
        }
        else
        {
            throw new NullReferenceException($"'e' or 'e.Value' is null.");
        }
    }

    void GetWordAssessment()
    {
        throw new NotImplementedException();
    }

    async void GetSimilarWords()
    {
        DataState.UpdateIsLoadingSimilarity(true);
        var invalidWords = CardsState.ListInvalidWords();
        if (invalidWords.Count > 0)
        {
            errorMessage = $"Invalid words: [{string.Join(", ", invalidWords)}]";
            return;
        }
        errorMessage = string.Empty;
        similarityResponse = await SimilarityClient.RequestSimilarWords();
        DataState.UpdateSimilarityItems(similarityResponse.SimilarCodewords);
        DataState.UpdateIsLoadingSimilarity(false);
    }

    string randomiseBoardButtonText = "Generate Random Board";
    void RandomiseBoard()
    {
        CardsState.GenerateRandomBoard(this);
    }
}
